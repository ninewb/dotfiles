#!/bin/bash
# Usage:
# curl -L https://github.com/ninewb/dotfiles/setup > x && chmod +x && sudo ./x
# update architecture versions

export AZUSER=azadmin
export FCEUID=10101
export HOSTNAME='meraxes'
export ARCH='x86'

export ME='fce'
export MYHOME="/home/${ME}"
export ASME="sudo -u ${ME}"
export PKGARCH=${ARCH}

[ "$(id -u)" -ne 0 ] && {
        _echo "got root?" >&2
        exit 1
}

# heading function
function _echo() { printf "\n╓───── %s \n╙────────────────────────────────────── ─ ─ \n" "$1"; }

# 1p functions
function get() {
        f="${3:-notesPlain}"
        op item get "$2" --account "$1" --fields "$f" --format json | jq -rM '.value'
}
function getfile() {
        f="${4:-notesPlain}"
        op --account "$1" read "op://$2/$3/$f"
}
function account() {
        domain="${3:-my}.1password.com"
        op account add \
                --address "$domain" \
                --email "$2" \
                --shorthand "$1"
}

### SECTION ########################################
_echo "adding external sources to apt"
####################################################

# add 1pw
curl -sS https://downloads.1password.com/linux/keys/1password.asc | gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg &&
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/$(dpkg --print-architecture) stable main" | tee /etc/apt/sources.list.d/1password.list > /dev/null
mkdir -p /etc/debsig/policies/AC2D62742012EA22/ &&
        curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22 &&
        curl -sS https://downloads.1password.com/linux/keys/1password.asc | gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg

# add hashicorp
curl -sL https://apt.releases.hashicorp.com/gpg |
        gpg --dearmor | tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
        https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list

### SECTION ########################################
_echo "install managed packages"
####################################################

apt -qq update &&
        DEBIAN_FRONTEND=noninteractive apt -qq install -y \
                1password-cli \
                apt-transport-https \
                bash bash-completion bc \
                ca-certificates curl \
                dpkg docker.io fzf \
                g++ gcc gettext git golang golang-doc golang-src gpg gpg-agent gpgv gzip \
                htop \
                iptables iputils-ping isc-dhcp-client \
                jq \
                libncurses5-dev libprotobuf-dev libpq-dev libssl-dev libtool libtool-bin \
                libutempter-dev libx11-dev libxfixes-dev lsb-base \
                man-db manpages \
                ncurses-base ncurses-bin ncurses-term neovim net-tools netbase nmap \
                openssl \
                postgresql-client-common postgresql-client \
                python3 python3-boto python3-pip python3-venv python3-neovim \
                stow sudo \
                tar tcpdump terraform tmux traceroute tree tzdata \
                unzip util-linux uuid-runtime \
                vim-tiny \
                whois \
                xsel xvfb xz-utils \
                zlib1g zlib1g-dev zsh zsh-syntax-highlighting
              
### SECTION ########################################
_echo "install unmanaged packages"
####################################################

# install azure-cli
curl -sL https://aka.ms/InstallAzureCLIDeb | bash

# install kubectl
curl -sLO https://storage.googleapis.com/kubernetes-release/release/v{$KUBECTL_VERSION}/bin/linux/amd64/kubectl \
  && mv kubectl /usr/local/bin/ \
  && chmod a+x /usr/local/bin/kubectl
  
# install starship
curl -sS https://starship.rs/install.sh | sh

# install yq
sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \
  && chmod a+x /usr/local/bin/yq

### SECTION ########################################
_echo "start and enable daemons"
####################################################

sudo systemctl start docker.service
sudo systemctl enable docker.service

### SECTION ########################################
_echo "setup user and shell"
####################################################
# startship custom configuration
# export STARSHIP_CONFIG=~/example/non/default/path/starship.toml
# export STARSHIP_CACHE=~/.starship/cache

# configure starship
${ASME} eval "$(starship init zsh)"
${ASME} mkdir -p ~/.config && touch ~/.config/starship.toml

### SECTION ########################################
_echo "setting up timezone and hostname"
####################################################

timedatectl set-timezone America/New_York
hostname "${HOSTNAME}"
hostnamectl set-hostname "${HOSTNAME}"
sed -i '/^127\.0\.0\.1\s/s/$/ '"$HOSTNAME"'/' /etc/hosts
sed -i '/^127\.0\.0\.1\s/s/$/ '"$HOSTNAME"'/' /etc/cloud/templates/hosts.debian.tmpl

### SECTION ########################################
_echo "creating local user"
####################################################

adduser \
    --uid "$FCE_UID" \
        --disabled-password \
        --gecos "" \
        --shell "$(which zsh)" "${ME}"

mkdir -p ${MYHOME}/.ssh
if [ -d "/home/${AZUSER}/.ssh" ]; then
        cp /home/${AZUSER}/.ssh/authorized_keys ${MYHOME}/.ssh/authorized_keys
else
        echo "WARNING: SSH key authorization could not be automated."
fi
chown -R ${ME}:${ME} ${MYHOME}/.ssh
chmod 700 ${MYHOME}/.ssh
chmod 600 ${MYHOME}/.ssh/*


### SECTION ########################################
_echo "granting root access"
####################################################

echo "${ME} ALL=(ALL) NOPASSWD:ALL" > "/etc/sudoers.d/${ME}"

### SECTION ########################################
_echo "creating directory skeletons"
####################################################

${ASME} mkdir -p \
        $MYHOME/.{config,local} \
        $MYHOME/.local/{bin,cache,docs,lib,share,src,state} \
        $MYHOME/.local/state/zsh/history

### SECTION ########################################
_echo "setting up dotfiles"
####################################################

${ASME} git clone https://github.com/ninewb/dotfiles.git $MYHOME/.dotfiles &&
        cd $MYHOME/.dotfiles &&
        $ASME stow bin git neovim ssh tmux zsh -t $MYHOME

### SECTION ########################################
_echo "tmux plugins"
####################################################
        
$ASME mkdir ${MYHOME}/.config/tmux/plugins &&
        $ASME git clone --depth=1 https://github.com/tmux-plugins/tpm ${MYHOME}/.config/tmux/plugins/tpm &&
        $ASME ${MYHOME}/.config/tmux/plugins/tpm/scripts/install_plugins.sh &&
        cd ${MYHOME}/.config/tmux/plugins/tmux-thumbs &&
        expect -c "spawn ./tmux-thumbs-install.sh; send \"\r1\r\"; expect complete" 1> /dev/null

### SECTION ########################################
_echo "create workspace"
####################################################

mkdir -p /workspace
chown -R ${ME}:${ME} /workspace
chmod -R 775 /workspace

